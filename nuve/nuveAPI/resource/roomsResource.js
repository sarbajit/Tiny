var roomRegistry=require("./../mdb/roomRegistry"),serviceRegistry=require("./../mdb/serviceRegistry"),Room=require("./room"),logger=require("./../logger").logger,log=logger.getLogger("RoomsResource"),currentService,doInit=function(){"use strict";currentService=require("./../auth/nuveAuthenticator").service};exports.createRoom=function(e,r){"use strict";var o;if(doInit(),void 0===currentService)return void r.status(404).send("Service not found");if("object"!=typeof e.body||null===e.body||"string"!=typeof e.body.name||""===e.body.name)return log.info("Invalid room"),void r.status(400).send("Invalid room");if(e.body.options=e.body.options||{},e.body.options.test)void 0!==currentService.testRoom?(log.info("TestRoom already exists for service",currentService.name),r.send(currentService.testRoom)):(o={name:"testRoom"},roomRegistry.addRoom(o,function(e){currentService.testRoom=e,currentService.rooms.push(e),serviceRegistry.updateService(currentService),log.info("TestRoom created for service",currentService.name),r.send(e)}));else{var t=e.body.options;if(t.name=e.body.name,o=Room.create(t),null===o)return r.status(400).send("Bad room configuration");roomRegistry.addRoom(o,function(o){currentService.rooms.push(o),serviceRegistry.updateService(currentService),log.info("Room created:",e.body.name,"for service",currentService.name),r.send(o)})}},exports.represent=function(e,r){"use strict";return doInit(),void 0===currentService?void r.status(404).send("Service not found"):(log.info("Representing rooms for service ",currentService._id),void r.send(currentService.rooms))};